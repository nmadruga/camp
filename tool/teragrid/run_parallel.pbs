#!/bin/tcsh
#  Sample Batch Script for a MVAPICH-Intel job
#
# $HOME/.soft contains:
#
#  @teragrid-basic
#  @globus-4.0
#  @teragrid-dev
#
# $HOME/.mpd.conf contains:
#
#  MPD_SECRETWORD=XXXXXXX     # random alphanumeric chars
#                             # (MUST contain at least one alphabetic char)
#
# (make sure the file .mpd.conf has permissions 700)
#
#  Submit this script using the command: qsub <script_name>
#
#  Use the "qstat" command to check the status of a job.
#
# The following are embedded QSUB options. The syntax is #PBS (the # does
# _not_  denote that the lines are commented out so do not remove).
#
# walltime : maximum wall clock time (hh:mm:ss)
#PBS -l walltime=00:15:00
#
# nodes: number of 8-core nodes
#   ppn: how many cores per node to use (1 through 8)
#       (you are always charged for the entire node)
#PBS -l nodes=1:ppn=8
#
# export all my environment variables to the job
#PBS -V
#
# job name (default = name of script file)
###PBS -N testjob
#
#
# filename for standard output (default = <job_name>.o<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
###PBS -o testjob.out
#
# filename for standard error (default = <job_name>.e<job_id>)
# at end of job, it is in directory from which qsub was executed
# remove extra ## from the line below if you want to name your own file
###PBS -e testjob.err
#
# End of embedded QSUB options
#
# set echo               # echo commands before execution; use for debugging
#

echo "starting job script"
set JOBID=`echo $PBS_JOBID | cut -d'.' -f1`
echo "JOBID = " ${JOBID}

cd $SCR                # change to job scratch directory, 
                       # use cdjob <jobid> to go to this directory once
                       # the job has started
echo "changed to SCR directory"
pwd

# get executable and input files from mass storage
#msscmd cd dir1, get a.out, mget *.input
echo "copying files..."
cp ~/svn/camp/trunk/build/camp .
cp ~/svn/camp/trunk/build/extract_* .
cp ~/svn/camp/trunk/build/numeric_diff .
cp ~/svn/camp/trunk/build/numeric_average .
cp -a ~/svn/camp/trunk/test .
echo "done copying files"
ls -l

# mss doesn't keep executable bit set, so need to set it on program
#chmod +x a.out

echo "starting mvapick2..."
mvapich2-start-mpd
echo "mvapick2 started"
setenv NP `wc -l ${PBS_NODEFILE} | cut -d'/' -f1`
echo "NP = " ${NP}

setenv MV2_SRQ_SIZE 4000
echo "MV2_SRQ_SIZE = " ${MV2_SRQ_SIZE}
#mpirun -np ${NP} a.out
cd test/parallel
./run_test_1.sh
./run_test_2.sh
./run_test_3.sh
./run_test_4.sh
./run_test_5.sh
./run_test_6.sh

# The mpirun syntax above will assign ranks to nodes in round-robin fashion.
# To get ranks *packed* into nodes, use this syntax:
#
#  mpirun  -machinefile ${PBS_NODEFILE} -np ${NP} a.out

echo "stopping mpd..."
mpdallexit
echo "mpd stopped"

# save output files back to mass storage
#msscmd cd dir1, mput *.output     

